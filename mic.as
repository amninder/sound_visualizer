package {	import flash.display.MovieClip;	import flash.media.Sound;	import flash.net.URLRequest;	import flash.events.Event;	import flash.utils.ByteArray;	import flash.media.SoundMixer;	import flash.display.Sprite;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.filters.BlurFilter;	import flash.filters.ColorMatrixFilter;	import flash.geom.Point;	import flash.media.Microphone;	import flash.events.StatusEvent;	import flash.events.SampleDataEvent;	public class mic extends MovieClip	{		private var bit_size:uint = 512;		public var ba:ByteArray = new ByteArray();		//public var s:Sound = new Sound(new URLRequest("electronica.mp3"));		public var s:Sound;		public var effectSprite:Sprite;		public var bmd:BitmapData;		public var bm:Bitmap;		public var blurFilter:BlurFilter;		public var colorMatrix:ColorMatrixFilter;		public var microphone:Microphone;		public function mic()		{			//s.play(0, 1000);						microphone = Microphone.getMicrophone();			if(microphone){				trace("Microphone initialized");				microphone.setLoopBack(false);                microphone.rate = 44;				microphone.gain = 60;                microphone.addEventListener(SampleDataEvent.SAMPLE_DATA, micSampleDataHandler);			}else{				trace("Mic not initialized");			}						initSound();						this.bmd = new BitmapData(this.stage.stageWidth,this.stage.stageHeight,true,0x07F73F);			this.bm = new Bitmap(this.bmd);			this.effectSprite = new Sprite();			this.blurFilter = new BlurFilter(1.5,1.5,1.5);			this.colorMatrix = new ColorMatrixFilter ([			0.02, 0, 0, 0, 0,			0, 0.96, 0, 0, 0,			0, 0, 0.24, 0, 0,			0, 0, 0, 1, 0			]);			this.stage.scaleMode = "exactFit";			this.stage.align = "TL";			this.addChild(this.bm);			this.addChild(this.effectSprite);			addEventListener(Event.ENTER_FRAME, loop);		}				private function micSampleDataHandler(event:SampleDataEvent) :void {            ba = event.data;			s.play();        }				public function initSound():void{			s = new Sound();			s.addEventListener(SampleDataEvent.SAMPLE_DATA, soundSampleDataHandler);		}		private function soundSampleDataHandler(event:SampleDataEvent):void{			for (var i:int = 0; i < 8192 && ba.bytesAvailable > 0; i++) {				var sample:Number = ba.readFloat();				event.data.writeFloat(sample);				event.data.writeFloat(sample);			}		}		function loop(e:Event)		{			this.effectSprite.graphics.clear();			this.effectSprite.graphics.lineStyle(1, 0x07F73F);			this.effectSprite.graphics.moveTo(-1, this.stage.stageHeight/2);			SoundMixer.computeSpectrum(ba);			this.bmd.draw(this);			for (var i:uint=0; i<bit_size; i++)			{				var num:Number = ba.readFloat() * this.stage.stageHeight / 2 + this.stage.stageHeight / 2;				//this.effectSprite.graphics.drawCircle(i*(this.stage.stageWidth / 256), num, 1);				this.effectSprite.graphics.lineTo(i*(this.stage.stageWidth/bit_size), num);			}			this.effectSprite.graphics.lineTo(this.stage.stageWidth+1, this.stage.stageHeight/2);			this.bmd.draw(this.effectSprite);			this.bmd.applyFilter(this.bmd, this.bmd.rect, new Point(), this.blurFilter);			this.bmd.applyFilter(this.bmd, this.bmd.rect, new Point(), this.colorMatrix);			this.bmd.scroll(0, 0);		}	}}